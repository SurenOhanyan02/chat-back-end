// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoomType {
  DIRECT
  GROUP
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  surname   String
  token     Token[]
  roomUser  RoomUser[]
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}



model Token {
  id          Int      @id @default(autoincrement())
  refreshToken String   @unique @db.VarChar(512)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("token")
}




model Message {
  id        Int      @id @default(autoincrement())
  content   String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  senderId  Int?
  sender    User?    @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("messages")
} 


model Room {
  id        Int      @id @default(autoincrement())
  type      RoomType @default(DIRECT)
  messages  Message[]
  participants RoomUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("rooms")
}


model RoomUser   {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("room_user")
}